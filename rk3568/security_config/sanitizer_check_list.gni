# Copyright (C) 2023 HiHope Open Source Organization .
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# The list of part name that need to enable cfi and disable debug mode
enable_cfi_part_list = [
  "audio_framework",
  "histreamer",
  "av_session",
  "huks",
  "certificate_manager",
  "image_framework",
  "media_library",
  "user_file_service",
  "contacts_data_hap",
  "crypto_framework",
  "wpa_supplicant",
  "netmanager_base",
  "camera_framework",
  "player_framework",
  "screenlock_mgr",
  "nfc",
  "wifi",
  "dsoftbus",
  "hilog",
  "bluetooth",
  "bluetooth_service",
]

# The list of part name that need to enable intsan
enable_intsan_part_list = []

# The list of build target that bypass the cfi check

bypass_cfi_target_list = [
  # audio_framework : //foundation/multimedia/audio_framework
  "audio_capturer_gateway",
  "oh_audio_capturer_test",
  "oh_audio_capturer_lowlatency_test",
  "audio_opensles_player_test",
  "audio_renderer_gateway",
  "oh_audio_renderer_test",
  "audio_opensles_recorder_test",
  "audio_capturer_test",
  "audio_renderer_test",
  "audio_toneplayer_test",
  "audio_latency_accuracy_test",
  "audio_render_mode_callback_test",
  "audio_process_client_test",
  "audio_voip_test",
  "audio_hdi_device_test",
  "audio_policy_test",
  "audio_interrupt_test",
  "audio_service_playback_test",
  "interrupt_multi_renderer_test",
  "audio_faststream_playback_test",
  "audio_blendmode_test",
  "audio_service_record_test",
  "audio_multichannel_test",
  "audio_schedule",
  "ohaudio",
  "opensles",
  "audio_common",
  "audio_dump",
  "audio",
  "audio_client",
  "audio_policy_service",
  "audio_capturer",
  "audio_renderer",
  "audio_process_service",
  "audio_toneplayer",
  "audio_service",
  "audio_policy_client",
  "module-loopback",
  "module-inner-capturer-sink",
  "module-hdi-sink",
  "module-receiver-sink",
  "module-hdi-source",
  "audio_utils",
  "audio_bluetooth_client",
  "pulse_audio_service_adapter",
  "audio_capturer_source",
  "audio_renderer_sink",
  "playback_capturer",
  "audio_effect",
  "fast_audio_capturer_source",
  "fast_audio_renderer_sink",
  "remote_audio_capturer_source",
  "bluetooth_renderer_sink",
  "remote_fast_audio_capturer_source",
  "remote_audio_renderer_sink",
  "audio_capturer_file_source",
  "remote_fast_audio_renderer_sink",
  "capturer_source_adapter",
  "audio_renderer_file_sink",
  "renderer_sink_adapter",
  "audio_device_manager",

  # histreamer : //foundation/multimedia/histreamer
  "histreamer_pipeline_base",
  "histreamer_plugin_intf",
  "plugin_base",
  "ffmpeg_convert",
  "histreamer_pipeline",
  "histreamer_plugin_core",
  "std_engine_factory",
  "histreamer_foundation",
  "codec_filters",
  "muxer_filter",
  "media_synchronous_sink",
  "audio_capture_filter",
  "scene_common",
  "demuxer_filter",
  "audio_sink_filter",
  "media_source_filter",
  "video_sink_filter",
  "video_capture_filter",
  "output_sink_filter",
  "ffmpeg_adapter_common",
  "filesource",
  "httpsource",
  "std_stream_source",
  "ffmpeg_audio_decoders",
  "std_audio_capture",
  "filefdsource",
  "audio_server_sink",
  "file_fd_sink",
  "std_video_surface_sink",
  "ffmpeg_demuxers",
  "std_plugin_codec_adapter",
  "ffmpeg_audio_encoders",
  "histreamer_recorder",
  "histreamer_player",
  "ffmpeg_video_decoders",
  "ffmpeg_video_encoders",
  "ffmpeg_muxers",

  # av_session : //foundation/multimedia/av_session
  "avcastpicker",
  "mediacontrolextensionability_napi",
  "avsession_client",
  "mediacontrolextensioncontext_napi",
  "media_control_extension",
  "media_control_extension_module",
  "avsession_item",
  "avsession_common",
  "avsession_napi",
  "avsession_utils",
  "avsession_cast_client",
  "avsession_service",
  "remote_session_source",
  "avsession_router",
  "remote_session_sink",
  "avsession_cast_item",

  # huks : //base/security/huks
  "libhukssdk_static",
  "cipher_napi",
  "huks_ndk",
  "cipher_shared",
  "huks_modify_old_version_key_util",

  # certificate_manager : //base/security/certificate_manager
  "libcert_manager_common_standard_static",
  "libcert_manager_log_mem_static",
  "libcert_manager_service_os_dependency_standard_static",
  "cert_manager_engine_core_standard",
  "libcm_service_idl_standard_static",
  "libcert_manager_hisysevent_wrapper_static",
  "libcert_manager_fuzz_test_common_static",
  "libcert_manager_ipc_client_static",

  # image_framework : //foundation/multimedia/image_framework
  "pixelconvertadapter_static",
  "image_static",
  "image_utils_static",
  "log_mock_static",
  "utils_mock_static",
  "pluginmanager_static",
  "jpegplugin",

  # media_library : //foundation/multimedia/media_library
  "scanner",
  "media_mtp",
  "mtpservice",
  "medialibrary_data_extension",

  # user_file_service : //foundation/filemanagement/user_file_service
  "file_access_extension_ability_kit",
  "fileaccess",
  "fileaccessextensionability_napi",
  "fileextensioninfo",
  "file_access_extension_ability_module",
  "recent",
  "trash",
  "file_access_service",

  # contacts_data_hap : //applications/standard/contacts_data
  "contactsdataability",

  # crypto_framework : //base/security/crypto_framework
  "crypto_plugin_common",
  "crypto_framework_lib",
  "cryptoframework_napi",
  "crypto_openssl_plugin_lib",

  # wpa_supplicant : //third_party/wpa_supplicant
  "wpa_cli",
  "hostapd_cli",
  "wpa_supplicant",
  "hostapd",
  "wpa_client",
  "wpa_client_updater",
  "wpa",
  "wpa_updater",

  # netmanager_base : //foundation/communication/netmanager_base
  "net_conn_parcel",
  "net_policy_parcel",
  "net_native_parcel",
  "netsys_native_manager_static",
  "net_stats_parcel",
  "net_policy_manager_static",
  "net_conn_manager_static",
  "net_stats_manager_static",
  "libip4tc",
  "libip6tc",
  "libxtables",
  "libext4",
  "libext6",
  "net_connection",
  "net_conn_manager_if",
  "net_conn_manager",
  "napi_utils",
  "net_policy_manager",
  "net_native_manager_if",
  "net_stats_manager_if",
  "net_policy_manager_if",
  "socket_permission",
  "netconn_ndk",

  # camera_framework : //foundation/multimedia/camera_framework
  "camera_video",
  "camera_capture",
  "camera_capture_video",
  "camera_capture_mode",
  "camera_framework",
  "camera_napi",
  "camera_service",

  # player_framework : //foundation/multimedia/player_framework
  "media_format",
  "audio_ringtone_client",
  "media_seccomp_filter",
  "systemsoundmanager",
  "media_engine_common_avcodeclist",
  "media_engine_gst_common",
  "media_engine_gst_loader",
  "media_engine_gst_recorder",
  "media_engine_gst_factory",
  "media_gst_dfx",
  "media_engine_gst_player",
  "media_engine_gst_avcodec",
  "media_engine_gst_avmeta",
  "gst_subtitle_sink_base",
  "gst_subtitle_parse_plugin",
  "gst_mem_sink_base",
  "gst_mem_src_base",
  "media_engine_dfx",
  "gst_codec_plugins_common",
  "soundpool_client",
  "gst_mem_sink",
  "gst_codec_bin",
  "gst_audio_server_sink",
  "gst_subtitle_sink",
  "gst_audio_capture_src",
  "gst_mem_src",
  "gst_media_common",
  "gst_codec_plugin_hdi",
  "native_avscreen_capture",

  # screenlock_mgr : //base/theme/screenlock_mgr
  "screenlock_static",
  "screenlock_server_static",

  # nfc : //foundation/communication/nfc
  # wifi : //foundation/communication/wifi
  "crpc_client_updater",
  "WifiHalVendorTest",
  "crpc_server",
  "crpc_client",
  "wifi_hal_service",
  "wifi_hal_service_updater",
  "wifi_scan_service_impl",
  "wifi_device_service_impl",
  "wifi_utils",
  "wifi_hotspot_service_impl",
  "wifi_p2p_service_impl",
  "wifi_device_proxy_impl",
  "wifi_hotspot_proxy_impl",
  "wifi_scan_proxy_impl",
  "wifi_p2p_proxy_impl",
  "rpc_server",
  "rpc_client",
  "wifi",
  "wifiext",
  "wifi_native_js",
  "wifimanager",
  "wifimanagerext",
  "wifi_sdk",

  # dsoftbus : //foundation/communication/dsoftbus
  "softbus_client",
  "softbus_server",
  "nstackx_dfile.open",
  "FillpSo.open",
  "softbus_adapter",
  "softbus_utils",
  "nstackx_ctrl",
  "nstackx_congestion.open",
  "nstackx_util.open",
  "softbus_client_static",
  "softbus_test_server",
  "dsoftbus_app_dfile",
  "auth_session_test",
  "SoftBusDumpDeviceInfo",

  # hilog : //base/hiviewdfx/hilog
  "libhilog",
  "libhilog_base",
  "hilog",
  "hilogd",
  "libhilognapi_src",
  "libhilog_source_ohos",
  "libhilog_source_windows",
  "libhilog_source_mac",
  "libhilog_source_linux",
  "libhilog_source_android",
  "libhilog_source_ios",
  "libhilog_base_source",
  "libhilog_source_ohos",
  "libhilog_source_windows",
  "libhilog_source_mac",
  "libhilog_source_linux",
  "libhilog_source_android",
  "libhilog_source_ios",
  "libhilog_base_source",

  # bluetooth : //foundation/communication/bluetooth
  "btframework",
  "bluetooth",
  "bluetoothmanager",
  "btcommon",
  "a2dp",
  "access",
  "baseprofile",
  "ble",
  "connection",
  "constant",
  "hfp",
  "hid",
  "pan",
  "socket",

  # bluetoth_service : //foundation/communication/bluetooth_service
  "bluetooth_server",
  "btservice",
  "btsbc",
  "btdummy",
  "btstack",
  "bluetooth_hdi_adapter",
  "btipc_static",
  "btipc_service",
]

# The list of build target that bypass the intsan check
bypass_intsan_target_list = []
